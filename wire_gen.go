// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package gke

import (
	"cloud.google.com/go/logging"
	"context"
	"log"
)

// Injectors from wire.go:

func NewLogClient(ctx context.Context, opts ...logging.LoggerOption) (*LogClient, error) {
	config := _wireConfigValue
	client, err := provideLoggingClient(ctx, config)
	if err != nil {
		return nil, err
	}
	logClient, err := provideLogClient(client, config, opts)
	if err != nil {
		return nil, err
	}
	return logClient, nil
}

var (
	_wireConfigValue = &pkgConfig
)

// wire.go:

func provideLoggingClient(ctx context.Context, config *Config) (*logging.Client, error) {
	result, err := logging.NewClient(ctx, config.ProjectId)
	if err != nil {
		return nil, err
	}

	result.OnError = func(err error) {
		log.Printf("%v", err)
	}

	err = result.Ping(ctx)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func provideLogClient(client *logging.Client, config *Config, opts []logging.LoggerOption) (*LogClient, error) {
	var defaultOpts []logging.LoggerOption
	if config.CommonLogLabels != nil && len(config.CommonLogLabels) > 0 {
		defaultOpts = append(defaultOpts, logging.CommonLabels(config.CommonLogLabels))
	}
	if len(opts) > 0 {
		defaultOpts = append(defaultOpts, opts...)
	}

	return &LogClient{
		Client: client,
		opts:   defaultOpts,
	}, nil
}

type LogClient struct {
	opts []logging.LoggerOption
	*logging.Client
}

func (l *LogClient) Logger(logID string, opts ...logging.LoggerOption) *logging.Logger {
	return l.Client.Logger(
		logID,
		append(l.opts, opts...)...,
	)
}
